// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonkeyShelter.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MonkeyShelter.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250427153628_MonkeyChange")]
    partial class MonkeyChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MonkeyShelter.Domain.Arrival", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MonkeyId")
                        .HasColumnType("uuid");

                    b.Property<float>("WeightAtArrival")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MonkeyId");

                    b.ToTable("Arrivals");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("Details")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.Departure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MonkeyId")
                        .HasColumnType("uuid");

                    b.Property<float>("WeightAtDeparture")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MonkeyId");

                    b.ToTable("Departures");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.ManagerShelter", b =>
                {
                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShelterId")
                        .HasColumnType("uuid");

                    b.HasIndex("ShelterId");

                    b.ToTable("ManagerShelters", (string)null);
                });

            modelBuilder.Entity("MonkeyShelter.Domain.Monkey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("CurrentWeight")
                        .HasColumnType("real");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ShelterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecieId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShelterId");

                    b.HasIndex("SpecieId");

                    b.ToTable("Monkeys");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.ReportCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Report")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReportCaches");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.Shelter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shelters");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.Specie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.VetCheckSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MonkeyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MonkeyId");

                    b.ToTable("VetCheckSchedules");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.WeightHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MonkeyId")
                        .HasColumnType("uuid");

                    b.Property<float>("NewWeight")
                        .HasColumnType("real");

                    b.Property<float>("OldWeight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MonkeyId");

                    b.ToTable("WeightHistories");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.Arrival", b =>
                {
                    b.HasOne("MonkeyShelter.Domain.Monkey", "Monkey")
                        .WithMany()
                        .HasForeignKey("MonkeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monkey");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.Departure", b =>
                {
                    b.HasOne("MonkeyShelter.Domain.Monkey", "Monkey")
                        .WithMany()
                        .HasForeignKey("MonkeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monkey");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.ManagerShelter", b =>
                {
                    b.HasOne("MonkeyShelter.Domain.Shelter", "Shelter")
                        .WithMany()
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.Monkey", b =>
                {
                    b.HasOne("MonkeyShelter.Domain.Shelter", "Shelter")
                        .WithMany()
                        .HasForeignKey("ShelterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonkeyShelter.Domain.Specie", "Specie")
                        .WithMany()
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");

                    b.Navigation("Specie");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.VetCheckSchedule", b =>
                {
                    b.HasOne("MonkeyShelter.Domain.Monkey", "Monkey")
                        .WithMany()
                        .HasForeignKey("MonkeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monkey");
                });

            modelBuilder.Entity("MonkeyShelter.Domain.WeightHistory", b =>
                {
                    b.HasOne("MonkeyShelter.Domain.Monkey", "Monkey")
                        .WithMany()
                        .HasForeignKey("MonkeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monkey");
                });
#pragma warning restore 612, 618
        }
    }
}
